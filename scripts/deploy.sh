#!/bin/bash

echo "üöÄ SISTEMA DE DEPLOY - PROJET VELOZ"
echo "===================================="
echo ""

# Configura√ß√µes
PROJECT_NAME="projet_veloz"
PORT=8001
GIT_REPO=""
BACKUP_DIR="backups/deploy_$(date +%Y%m%d_%H%M%S)"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help          Mostra esta ajuda"
    echo "  -r, --repo URL      URL do reposit√≥rio Git"
    echo "  -b, --branch BRANCH Branch para deploy (padr√£o: main)"
    echo "  -p, --port PORT     Porta do servidor (padr√£o: 8001)"
    echo "  -e, --env ENV       Ambiente (dev/prod, padr√£o: prod)"
    echo "  -k, --keep-backup   Manter backup ap√≥s deploy"
    echo ""
    echo "Exemplos:"
    echo "  $0 -r https://github.com/user/projet_veloz.git"
    echo "  $0 -r https://github.com/user/projet_veloz.git -b dev"
    echo "  $0 -r https://github.com/user/projet_veloz.git -e dev"
}

# Fun√ß√£o para criar backup
create_backup() {
    echo "üì¶ Criando backup do estado atual..."
    mkdir -p "$BACKUP_DIR"
    
    # Copiar arquivos importantes
    if [ -d "app" ]; then
        cp -r app/ "$BACKUP_DIR/"
    fi
    if [ -d "templates" ]; then
        cp -r templates/ "$BACKUP_DIR/"
    fi
    if [ -d "static" ]; then
        cp -r static/ "$BACKUP_DIR/"
    fi
    if [ -f "app.py" ]; then
        cp app.py "$BACKUP_DIR/"
    fi
    if [ -f "requirements.txt" ]; then
        cp requirements.txt "$BACKUP_DIR/"
    fi
    
    echo "‚úÖ Backup criado em: $BACKUP_DIR"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo "üîç Verificando depend√™ncias do sistema..."
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python 3 n√£o encontrado!"
        exit 1
    fi
    
    # Verificar pip
    if ! command -v pip &> /dev/null; then
        echo "‚ùå pip n√£o encontrado!"
        exit 1
    fi
    
    # Verificar git
    if ! command -v git &> /dev/null; then
        echo "‚ùå Git n√£o encontrado!"
        exit 1
    fi
    
    echo "‚úÖ Depend√™ncias verificadas!"
}

# Fun√ß√£o para parar servidor
stop_server() {
    echo "üõë Parando servidor..."
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; then
        lsof -ti:$PORT | xargs kill -9
        echo "‚úÖ Servidor parado!"
    else
        echo "‚ÑπÔ∏è  Servidor n√£o estava rodando."
    fi
}

# Fun√ß√£o para clonar/atualizar reposit√≥rio
update_repository() {
    local repo_url="$1"
    local branch="$2"
    
    echo "üì• Atualizando reposit√≥rio..."
    
    if [ ! -d ".git" ]; then
        echo "üîÑ Clonando reposit√≥rio..."
        git clone -b "$branch" "$repo_url" temp_repo
        cp -r temp_repo/* .
        cp -r temp_repo/.* . 2>/dev/null || true
        rm -rf temp_repo
    else
        echo "üîÑ Atualizando reposit√≥rio existente..."
        git fetch origin
        git reset --hard "origin/$branch"
    fi
    
    echo "‚úÖ Reposit√≥rio atualizado!"
}

# Fun√ß√£o para configurar ambiente
setup_environment() {
    local env="$1"
    
    echo "‚öôÔ∏è  Configurando ambiente: $env"
    
    # Criar ambiente virtual se n√£o existir
    if [ ! -d ".venv" ]; then
        echo "üì¶ Criando ambiente virtual..."
        python3 -m venv .venv
    fi
    
    # Ativar ambiente virtual
    source .venv/bin/activate
    
    # Instalar depend√™ncias
    echo "üì¶ Instalando depend√™ncias..."
    pip install -r requirements.txt
    
    # Configurar vari√°veis de ambiente
    if [ "$env" = "prod" ]; then
        export FLASK_ENV=production
        export FLASK_DEBUG=False
    else
        export FLASK_ENV=development
        export FLASK_DEBUG=True
    fi
    
    echo "‚úÖ Ambiente configurado!"
}

# Fun√ß√£o para iniciar servidor
start_server() {
    local env="$1"
    
    echo "üöÄ Iniciando servidor..."
    
    if [ "$env" = "prod" ]; then
        echo "üè≠ Modo produ√ß√£o com Gunicorn..."
        gunicorn -w 4 -b 0.0.0.0:$PORT app:app --daemon
    else
        echo "üîß Modo desenvolvimento..."
        python3 app.py &
    fi
    
    # Aguardar servidor iniciar
    sleep 3
    
    # Verificar se servidor est√° rodando
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; then
        echo "‚úÖ Servidor iniciado com sucesso!"
        echo "üåê Acesse: http://localhost:$PORT"
    else
        echo "‚ùå Erro ao iniciar servidor!"
        exit 1
    fi
}

# Fun√ß√£o para limpar backup
cleanup_backup() {
    if [ "$KEEP_BACKUP" != "true" ]; then
        echo "üßπ Limpando backup..."
        rm -rf "$BACKUP_DIR"
        echo "‚úÖ Backup removido!"
    else
        echo "üíæ Backup mantido em: $BACKUP_DIR"
    fi
}

# Vari√°veis
GIT_REPO=""
BRANCH="main"
ENVIRONMENT="prod"
KEEP_BACKUP="false"

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -r|--repo)
            GIT_REPO="$2"
            shift 2
            ;;
        -b|--branch)
            BRANCH="$2"
            shift 2
            ;;
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -k|--keep-backup)
            KEEP_BACKUP="true"
            shift
            ;;
        *)
            echo "‚ùå Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Verificar se reposit√≥rio foi especificado
if [ -z "$GIT_REPO" ]; then
    echo "‚ùå Erro: URL do reposit√≥rio √© obrigat√≥ria!"
    echo ""
    show_help
    exit 1
fi

# Verificar se porta √© v√°lida
if ! [[ "$PORT" =~ ^[0-9]+$ ]] || [ "$PORT" -lt 1 ] || [ "$PORT" -gt 65535 ]; then
    echo "‚ùå Erro: Porta inv√°lida: $PORT"
    exit 1
fi

echo "üöÄ Iniciando deploy..."
echo "üìã Configura√ß√µes:"
echo "   ‚Ä¢ Reposit√≥rio: $GIT_REPO"
echo "   ‚Ä¢ Branch: $BRANCH"
echo "   ‚Ä¢ Porta: $PORT"
echo "   ‚Ä¢ Ambiente: $ENVIRONMENT"
echo ""

# Executar etapas do deploy
check_dependencies
create_backup
stop_server
update_repository "$GIT_REPO" "$BRANCH"
setup_environment "$ENVIRONMENT"
start_server "$ENVIRONMENT"
cleanup_backup

echo ""
echo "üéâ Deploy conclu√≠do com sucesso!"
echo "üìä Status do servidor:"
lsof -i :$PORT 
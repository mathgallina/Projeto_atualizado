#!/bin/bash

echo "üöÄ CONFIGURA√á√ÉO COMPLETA - PROJET VELOZ"
echo "========================================"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help          Mostra esta ajuda"
    echo "  -a, --all           Configura√ß√£o completa"
    echo "  -g, --git           Configurar apenas Git"
    echo "  -c, --clean         Limpar projeto"
    echo "  -s, --start         Iniciar servidor"
    echo "  -t, --test          Executar testes"
    echo "  -b, --backup        Criar backup"
    echo ""
    echo "Exemplos:"
    echo "  $0 -a               # Configura√ß√£o completa"
    echo "  $0 -g -c            # Git + limpeza"
    echo "  $0 -s               # Iniciar servidor"
}

# Fun√ß√£o para mostrar progresso
show_progress() {
    local step="$1"
    local total="$2"
    local message="$3"
    
    echo -e "${BLUE}[$step/$total]${NC} $message"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    show_progress 1 8 "Verificando depend√™ncias do sistema..."
    
    local missing_deps=()
    
    # Verificar Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # Verificar pip
    if ! command -v pip &> /dev/null; then
        missing_deps+=("pip")
    fi
    
    # Verificar git
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Depend√™ncias faltando:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo "   ‚Ä¢ $dep"
        done
        echo ""
        echo "üí° Instale as depend√™ncias e tente novamente."
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias verificadas!${NC}"
}

# Fun√ß√£o para limpar projeto
clean_project() {
    show_progress 2 8 "Limpando projeto..."
    
    # Executar script de limpeza
    if [ -f "scripts/cleanup.sh" ]; then
        ./scripts/cleanup.sh -a
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de limpeza n√£o encontrado.${NC}"
    fi
}

# Fun√ß√£o para configurar Git
setup_git() {
    show_progress 3 8 "Configurando controle de vers√£o..."
    
    if [ -f "scripts/init_git.sh" ]; then
        ./scripts/init_git.sh -c
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de Git n√£o encontrado.${NC}"
    fi
}

# Fun√ß√£o para configurar ambiente virtual
setup_venv() {
    show_progress 4 8 "Configurando ambiente virtual..."
    
    if [ ! -d ".venv" ]; then
        echo "üì¶ Criando ambiente virtual..."
        python3 -m venv .venv
    fi
    
    # Ativar ambiente virtual
    source .venv/bin/activate
    
    # Instalar depend√™ncias
    echo "üì¶ Instalando depend√™ncias..."
    pip install -r requirements.txt
    
    echo -e "${GREEN}‚úÖ Ambiente virtual configurado!${NC}"
}

# Fun√ß√£o para criar arquivo .env
create_env_file() {
    show_progress 5 8 "Configurando vari√°veis de ambiente..."
    
    if [ ! -f ".env" ]; then
        if [ -f "env.example" ]; then
            cp env.example .env
            echo -e "${GREEN}‚úÖ Arquivo .env criado!${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Edite o arquivo .env com suas configura√ß√µes.${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Arquivo env.example n√£o encontrado.${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Arquivo .env j√° existe.${NC}"
    fi
}

# Fun√ß√£o para criar pastas necess√°rias
create_directories() {
    show_progress 6 8 "Criando estrutura de pastas..."
    
    local dirs=("logs" "backups" "docs" "tests")
    
    for dir in "${dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo "üìÅ Criada pasta: $dir"
        fi
    done
    
    # Criar arquivo .gitkeep em pastas vazias
    touch logs/.gitkeep
    touch backups/.gitkeep
    touch tests/.gitkeep
    
    echo -e "${GREEN}‚úÖ Estrutura de pastas criada!${NC}"
}

# Fun√ß√£o para testar aplica√ß√£o
test_application() {
    show_progress 7 8 "Testando aplica√ß√£o..."
    
    # Verificar se o servidor inicia
    echo "üß™ Testando inicializa√ß√£o do servidor..."
    
    # Parar servidor se estiver rodando
    if lsof -Pi :8001 -sTCP:LISTEN -t >/dev/null ; then
        lsof -ti:8001 | xargs kill -9
    fi
    
    # Testar se o app.py funciona
    if python3 -c "import app; print('‚úÖ App importado com sucesso!')" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Aplica√ß√£o testada com sucesso!${NC}"
    else
        echo -e "${RED}‚ùå Erro ao testar aplica√ß√£o!${NC}"
        return 1
    fi
}

# Fun√ß√£o para mostrar resumo
show_summary() {
    show_progress 8 8 "Finalizando configura√ß√£o..."
    
    echo ""
    echo -e "${GREEN}üéâ CONFIGURA√á√ÉO CONCLU√çDA!${NC}"
    echo "================================"
    echo ""
    echo "üìã Resumo da configura√ß√£o:"
    echo "   ‚úÖ Depend√™ncias verificadas"
    echo "   ‚úÖ Projeto limpo"
    echo "   ‚úÖ Git configurado"
    echo "   ‚úÖ Ambiente virtual criado"
    echo "   ‚úÖ Vari√°veis de ambiente configuradas"
    echo "   ‚úÖ Estrutura de pastas criada"
    echo "   ‚úÖ Aplica√ß√£o testada"
    echo ""
    echo "üöÄ Para iniciar o servidor:"
    echo "   ./scripts/start_server.sh"
    echo ""
    echo "üìö Scripts dispon√≠veis:"
    echo "   ‚Ä¢ scripts/start_server.sh  - Iniciar servidor"
    echo "   ‚Ä¢ scripts/rollback.sh      - Fazer rollback"
    echo "   ‚Ä¢ scripts/deploy.sh        - Deploy em produ√ß√£o"
    echo "   ‚Ä¢ scripts/cleanup.sh       - Limpar projeto"
    echo ""
    echo "üåê Acesse: http://localhost:8001"
    echo "üë§ Login: admin"
    echo "üîë Senha: admin123"
}

# Fun√ß√£o para iniciar servidor
start_server() {
    echo "üöÄ Iniciando servidor..."
    
    if [ -f "scripts/start_server.sh" ]; then
        ./scripts/start_server.sh
    else
        echo -e "${RED}‚ùå Script de inicializa√ß√£o n√£o encontrado!${NC}"
        exit 1
    fi
}

# Fun√ß√£o para executar testes
run_tests() {
    echo "üß™ Executando testes..."
    
    if [ -d "tests" ]; then
        python3 -m pytest tests/ -v
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pasta de testes n√£o encontrada.${NC}"
    fi
}

# Fun√ß√£o para criar backup
create_backup() {
    echo "üì¶ Criando backup..."
    
    local backup_dir="backups/manual_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Copiar arquivos importantes
    cp -r app/ "$backup_dir/"
    cp -r templates/ "$backup_dir/"
    cp -r static/ "$backup_dir/"
    cp app.py "$backup_dir/"
    cp requirements.txt "$backup_dir/"
    
    echo -e "${GREEN}‚úÖ Backup criado em: $backup_dir${NC}"
}

# Vari√°veis
SETUP_ALL="false"
SETUP_GIT="false"
CLEAN_PROJECT="false"
START_SERVER="false"
RUN_TESTS="false"
CREATE_BACKUP="false"

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -a|--all)
            SETUP_ALL="true"
            shift
            ;;
        -g|--git)
            SETUP_GIT="true"
            shift
            ;;
        -c|--clean)
            CLEAN_PROJECT="true"
            shift
            ;;
        -s|--start)
            START_SERVER="true"
            shift
            ;;
        -t|--test)
            RUN_TESTS="true"
            shift
            ;;
        -b|--backup)
            CREATE_BACKUP="true"
            shift
            ;;
        *)
            echo "‚ùå Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Se nenhuma op√ß√£o foi especificada, fazer configura√ß√£o completa
if [ "$SETUP_ALL" = "false" ] && [ "$SETUP_GIT" = "false" ] && [ "$CLEAN_PROJECT" = "false" ] && [ "$START_SERVER" = "false" ] && [ "$RUN_TESTS" = "false" ] && [ "$CREATE_BACKUP" = "false" ]; then
    SETUP_ALL="true"
fi

# Executar configura√ß√£o completa
if [ "$SETUP_ALL" = "true" ]; then
    check_dependencies
    clean_project
    setup_git
    setup_venv
    create_env_file
    create_directories
    test_application
    show_summary
else
    # Executar a√ß√µes espec√≠ficas
    if [ "$CLEAN_PROJECT" = "true" ]; then
        clean_project
    fi
    
    if [ "$SETUP_GIT" = "true" ]; then
        setup_git
    fi
    
    if [ "$RUN_TESTS" = "true" ]; then
        run_tests
    fi
    
    if [ "$CREATE_BACKUP" = "true" ]; then
        create_backup
    fi
    
    if [ "$START_SERVER" = "true" ]; then
        start_server
    fi
fi

echo ""
echo -e "${GREEN}‚ú® Configura√ß√£o finalizada!${NC}" 